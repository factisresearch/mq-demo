#!/bin/bash

HERE=$(cd $(dirname ${BASH_SOURCE[0]}) > /dev/null && pwd -P)
cd "$HERE/.."

set -e
set -o pipefail

ERRORS=0

if [ "$(uname)" == "darwin" ]
then
    sed="sed -r"
else
    sed="sed -E"
fi

word_check=yes
if [ "$1" == "--no-word-check" ]
then
    word_check=no
    shift
fi

#file test args msg
function check() {
    for err in $(grep $3 "$2" -- "$1" | cut -d: -f1,2)
    do
        echo "$err: $4"
        ERRORS=$(($ERRORS+1))
    done
    return 0
}

function checkWord() {
    for err in $(grep $3 -v "(.*)(--)(.*)\<($2)\>" -- "$1" |
                 grep -E "\<($2)\>" |
                 grep -Ev "(\")(.*)($2)(.*)(\")" |
                 cut -d: -f1,2)
    do
        echo "$err: $2 found"
        ERRORS=$(($ERRORS+1))
    done
    return 0
}

if [ -z "$1" ]
then
    files=$(find . -type f \
                     -not -path "*/scratch*" -and \
                     -not -path "*/.idea/*" -and \
                     -not -path "*/node_modules/*" -and \
                     -not -path "*/closure/*" -and \
                     -not -path "*/DociProtocols/*" -and \
                     -not -path "*/_darcs/*" -and \
                     -not -path "*/appliance/*" -and \
                     -not -path "*/datasets/*" -and \
                     -not -path "*/dist/*" -and \
                     -not -path "*/data/jslibs/*" -and \
                     -not -path "*/data/jsexterns/*" -and \
                     -not -path "*/data/demo-lab/*" -and \
                     -not -path "*/doc/*" -and \
                     -not -path "*/src/lib/Mgw/Util/SafeCopy.hs" -and \
                     -not -path "*/src/lib/Mgw/Util/SafeCopy/*" -and \
                     -not -path "*/src/gen/*" -and \
                     -not -path "*/ssl/*" -and \
                     -not -path "*/tests/MgwGenItemsXml/*" -and \
                     -not -path "*/data/style.css" -and \
                     -not -path "*/build/*" -and \
                     -not -path "*/3rdParty/*" -and \
                     -not -name "jsforms_deprecated.js" -and \
                     -not -name "sync.rng" -and \
                     -not -name "macros.h" -and \
                     -not -name "HaskoonServer.hs" -and \
                     -not -name "jquery-1.5.1.js" -and \
                     -not -name "jquery-1.7.1.min.js" -and \
                     -not -name "jquery-ui-1.10.3.custom.js" -and \
                     -not -name "*.min.js" -and \
                     -not -name "blockUI.js" -and \
                     -not -name "appliance.js" -and \
                     -not -name "jsforms.js" -and \
                     -not -name "json2.js" -and \
                     -not -name "laborviewer.css" -and \
                     -not -name "iscroll_mod.js" -and \
                     -not -path "*/scripts/xml-to-jsonml.xsl" -and \
                     -not -path "*/scripts/checkpad-dist/*" -and \
                     -not -path "*/00_checklogger.js" -and \
                       \( -name "*.h" -or \
                          -name "*.hs" -or \
                          -name "*.js" -or \
                          -name "*.py" -or \
                          -name "*.rng" -or \
                          -name "*.sh" -or \
                          -name "*.xml" -or \
                          -name "*.xsl" -or \
                          -regex "\./scripts/[^/.]*/[^/.]*" \
                       \))
    files="$files ../protocols/protos/"*.proto
else
    files="$@"
fi
FILES=0
for file in $files; do
    check "$file" '^.{101,}$' -EHn "line too long"
    check "$file" ' $' -EHn "trailing whitespace"
    check "$file" '	' -Hn "tab found"
    if [ "$word_check" == "yes" ]
    then
        case $file in
            *.hs)
                checkWord "$file" \
                    'undefined|error|fromJust|fromRight|fromLeft' -EHn
                ;;
            *.js)
                checkWord "$file" \
                    'CheckLogger.log|CheckLogger.error|CheckLogger.warn' -EHn
                ;;
        esac
    fi
    FILES=$(($FILES+1))
done

for file in $(find ../protocols -name "*.proto"); do
    if grep -vEHn '^( {2})*($|[^ ])' $file \
        | $sed 's/(:[0-9]+:).*$/\1 wrong indentation/g'
    then
        FILES=$(($FILES+1))
        ERRORS=$(($ERRORS+1))
    fi
done

if [ $ERRORS -gt 0 ]
then
    echo
    echo "syncheck FAILED: $ERRORS errors found in $FILES files"
    exit 1
else
    if [ $FILES -gt 1 ]
    then
        echo "syncheck OK: successfully checked $FILES files"
    fi
    exit 0
fi
